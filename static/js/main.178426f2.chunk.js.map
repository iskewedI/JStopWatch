{"version":3,"sources":["components/Stopwatch.js","components/Toggle.js","components/Icons.js","components/Countdown.js","App.js","index.js"],"names":["Stopwatch","state","timerOn","timerStart","timerTime","startTimer","setState","Date","now","timer","setInterval","stopTimer","clearInterval","resetTimer","this","seconds","Math","floor","slice","minutes","hours","className","onClick","Component","Toggle","props","onChange","icons","checked","unchecked","stopwatchIcon","React","createElement","countdownIcon","autoIcon","manualIcon","arrowUp","twoArrowUp","arrowDown","twoArrowDown","Countdown","auto","console","time","newTime","log","timeEnd","restartTimer","adjustTimer","input","toggleAuto","key","App","isStopwatch","changeTimer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.178426f2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/components.css\";\r\n\r\nclass Stopwatch extends Component {\r\n  state = {\r\n    timerOn: false,\r\n    timerStart: 0,\r\n    timerTime: 0\r\n  };\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: Date.now() - this.state.timerTime\r\n    });\r\n    this.timer = setInterval( () => {\r\n      this.setState({\r\n        timerTime: Date.now () - this.state.timerStart\r\n      });\r\n    }, 10);\r\n  };\r\n  stopTimer = () => {\r\n    this.setState({\r\n      timerOn: false\r\n    });\r\n    clearInterval(this.timer);\r\n  }\r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: 0,\r\n      timerTime: 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { timerTime } = this.state;\r\n\r\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\r\n    let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\r\n\r\n    return (\r\n      <div className=\"Stopwatch\">\r\n        <div className=\"Stopwatch-header\">Stopwatch</div>\r\n\r\n        <div className=\"Stopwatch-display\">\r\n          {hours} : {minutes} : {seconds}\r\n        </div>\r\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\r\n        <button onClick={this.startTimer}>Start</button>\r\n        )}\r\n        {this.state.timerOn === true && (\r\n          <button onClick={this.stopTimer}>Stop</button>\r\n        )}\r\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n          <button onClick={this.startTimer}>Resume</button>\r\n        )}\r\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n          <button onClick={this.resetTimer}>Reset</button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Stopwatch;","import React, {Component} from 'react';\r\nimport ReactToggle from \"react-toggle\";\r\nimport \"react-toggle/style.css\";\r\nimport \"../styles/components.css\";\r\n\r\n\r\nclass Toggle extends Component {\r\n    render(){\r\n        return(\r\n            <ReactToggle \r\n            className={this.props.className}\r\n            onChange={this.props.onChange}\r\n            icons={{\r\n                checked: this.props.icons[0],\r\n                unchecked: this.props.icons[1]\r\n            }}/>\r\n        )\r\n    }\r\n}\r\nexport default Toggle;","import React from 'react';\r\n\r\nexport const stopwatchIcon = React.createElement(\"i\", {className:\"stpwIcon fas fa-clock\"});\r\nexport const countdownIcon = React.createElement(\"i\", {className:\"cntdwIcon fas fa-stopwatch-20\"});\r\nexport const autoIcon = React.createElement(\"i\", {className:\"autoIcon fas fa-undo-alt\"});\r\nexport const manualIcon = React.createElement(\"i\", {className:\"manualIcon fas fa-hourglass-end\"});\r\nexport const arrowUp = React.createElement(\"i\", {className:\"arrowUp fas fa-angle-up\"});\r\nexport const twoArrowUp = React.createElement(\"i\", {className:\"twoArrowUp fas fa-angle-double-up\"});\r\nexport const arrowDown = React.createElement(\"i\", {className:\"arrowDown fas fa-angle-down\"});\r\nexport const twoArrowDown = React.createElement(\"i\", {className:\"twoArrowDown fas fa-angle-double-down\"});","import React, { Component } from \"react\";\r\nimport \"../styles/components.css\";\r\nimport Toggle from './Toggle.js';\r\n\r\nimport {autoIcon, manualIcon, arrowUp, twoArrowUp, arrowDown, twoArrowDown} from './Icons.js';\r\n\r\nclass Countdown extends Component {\r\n  state = {\r\n    timerOn: false,\r\n    auto: false,\r\n    timerStart: 0,\r\n    timerTime: 990\r\n  };\r\n  startTimer = () => {\r\n    console.time(\"timer\");\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: this.state.timerTime\r\n    });\r\n    this.timer = setInterval(() => {\r\n      const newTime = this.state.timerTime - 10;\r\n      if (newTime > 1000) {\r\n        this.setState({\r\n          timerTime: newTime\r\n        });\r\n      }else if(this.state.auto === true && this.state.timerStart > 0){\r\n        this.setState({\r\n            timerTime: this.state.timerStart + 990\r\n        });\r\n        console.log(\"Tiempo: \" + console.timeEnd(\"timer\"));\r\n        console.time(\"timer\");\r\n      } else {\r\n        clearInterval(this.timer);\r\n        this.setState({ timerOn: false, timerTime: 0 });\r\n        console.timeEnd(\"timer\");\r\n\r\n        console.log(\"Countdown ended\");\r\n      }\r\n    }, 10);\r\n  };\r\n  stopTimer = () => {\r\n    clearInterval(this.timer);\r\n    this.setState({ timerOn: false });\r\n  };\r\n  resetTimer = () => {\r\n    if (this.state.timerOn === false) {\r\n      this.setState({\r\n        timerTime: this.state.timerStart\r\n      });\r\n    }\r\n  };\r\n  restartTimer = () => {\r\n      this.setState({\r\n          timerOn: false,\r\n          timerStart: 0,\r\n          timerTime: 0\r\n      })\r\n  }\r\n  adjustTimer = (input) => {\r\n    const { timerTime, timerOn } = this.state;\r\n    const max = 216000000;\r\n    if (!timerOn) {\r\n    if (input === \"incMinutes\" && timerTime + 60000 < max) {\r\n        this.setState({ timerTime: timerTime + 60000 });\r\n      } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\r\n        this.setState({ timerTime: timerTime - 60000 });\r\n      } else if (input === \"incSeconds\" && timerTime + 1000 < max) {\r\n        this.setState({ timerTime: timerTime + 1000 });\r\n      } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\r\n        this.setState({ timerTime: timerTime - 1000 });\r\n      }\r\n    }\r\n  };\r\n  toggleAuto = () => {\r\n      this.setState({\r\n          auto: !this.state.auto\r\n      });\r\n  };\r\n  render() {\r\n    const { timerOn, auto, timerTime, timerStart } = this.state;\r\n\r\n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\r\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\r\n\r\n    return (\r\n      <div className=\"Countdown\">\r\n        <div className=\"Countdown-header\">Countdown</div>\r\n        <Toggle onChange={this.toggleAuto} icons={[autoIcon, manualIcon]} className=\"toggleAuto\"/>\r\n\r\n        <div className=\"Countdown-display\">        \r\n        <button onClick={() => this.adjustTimer(\"incMinutes\")}>{twoArrowUp}</button>\r\n        <button onClick={() => this.adjustTimer(\"incSeconds\")}>{arrowUp}</button>\r\n        \r\n\r\n        <div className=\"Countdown-time\">\r\n             {minutes} : {seconds}\r\n        </div>\r\n\r\n        <button onClick={() => this.adjustTimer(\"decMinutes\")}>{twoArrowDown}</button>\r\n        <button onClick={() => this.adjustTimer(\"decSeconds\")}>{arrowDown}</button>\r\n        </div>\r\n       \r\n        {timerOn === false &&\r\n            (timerStart === 0 || timerTime === timerStart) && (\r\n                <button className=\"controllerButton\" onClick={this.startTimer}>Start</button>\r\n        )}\r\n        {timerOn === true && timerTime >= 0 && (\r\n                <button className=\"controllerButton\" onClick={this.stopTimer}>Stop</button>\r\n        )}\r\n        {timerOn === false &&\r\n            (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\r\n                <button className=\"controllerButton\" onClick={this.startTimer}>Resume</button>\r\n        )}\r\n        {(timerOn === false || (auto === false && timerTime <= 0) ) &&\r\n            (timerStart !== timerTime && timerStart > 0) && \r\n                [<button className=\"controllerButton\" key={0} onClick={this.resetTimer}>Reset</button>,\r\n                <button  className=\"controllerButton\" key={1} onClick={this.restartTimer}>Restart</button>]\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Countdown;","import React, { Component } from \"react\";\nimport './styles/App.css';\nimport Stopwatch from './components/Stopwatch';\nimport Countdown from './components/Countdown';\nimport Toggle from './components/Toggle';\n\nimport {stopwatchIcon, countdownIcon} from './components/Icons.js';\n\nclass App extends Component {\n  state = {\n    isStopwatch:false,\n  }\n  changeTimer = () => {\n    this.setState({\n      isStopwatch: !this.state.isStopwatch\n    })\n  };\n  render(){\n    return (\n      <div className=\"App\">\n        <Toggle onChange={this.changeTimer} icons={[stopwatchIcon, countdownIcon]} className=\"changeTimer\"/>\n        {this.state.isStopwatch && (\n          <Stopwatch />\n        )}\n        {!this.state.isStopwatch && (\n          <Countdown />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/App.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}